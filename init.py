import telebot
import os
import torch
import torchvision
from torchvision import transforms
from PIL import Image
from telebot import types
import config
import getRandomModel
import glob

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(config.TOKEN)

# –°–ª–æ–≤–∞—Ä—å —Å –º–∞—Ä–∫–∞–º–∏ –∏ –º–æ–¥–µ–ª—è–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
CAR_MODELS = {
    'BYD': ['BYDDenzaZ9GT', 'BYDSeal05DM-i', 'BYDSeal07DM-i'],
    'Changan': ['ChanganShenlanL07'],
    'Chery': ['CheryTiggo7ProMax', 'CheryTiggo9C-DM'],
    'Jetour': ['JetourShanhaiL7']
}

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ (–º–∞—Ä–∫–∞ + –º–æ–¥–µ–ª—å)
ALL_CLASSES = []
for brand, models in CAR_MODELS.items():
    for model in models:
        ALL_CLASSES.append(f"{brand}_{model}")

print(ALL_CLASSES)
# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å –≤–µ—Å–∞–º–∏ –º–æ–¥–µ–ª–∏
MODEL_PATH = 'car_model.pth'
MODEL_EXISTS = os.path.exists(MODEL_PATH)


# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏
def load_model():
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é ResNet18
        model = torchvision.models.resnet18(weights=torchvision.models.ResNet18_Weights.DEFAULT)
        num_ftrs = model.fc.in_features
        model.fc = torch.nn.Linear(num_ftrs, len(ALL_CLASSES))

        if os.path.exists(MODEL_PATH):
            try:
                checkpoint = torch.load(MODEL_PATH, map_location=torch.device('cpu'))

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —á–∏—Å–ª–æ –∫–ª–∞—Å—Å–æ–≤ –≤ –º–æ–¥–µ–ª–∏ –∏ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                if 'fc.weight' in checkpoint and checkpoint['fc.weight'].shape[0] != len(ALL_CLASSES):
                    print(
                        f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤ –≤ –º–æ–¥–µ–ª–∏ ({checkpoint['fc.weight'].shape[0]}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º ({len(ALL_CLASSES)}).")
                    print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ù—É–∂–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
                    return model  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–¥–µ–ª—å —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏

                # –ï—Å–ª–∏ –≤—Å—ë —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞
                model.load_state_dict(checkpoint)
                print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {str(e)}")
                print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏")
        else:
            print("‚ö†Ô∏è –§–∞–π–ª —Å –≤–µ—Å–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏.")

        model.eval()
        return model

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {str(e)}")
        exit(1)


# –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –≤ –ø–µ—Ä–≤–æ–º –∫–æ–¥–µ)
transform = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])


def predict_car_model(image_path, model):
    try:
        image = Image.open(image_path).convert('RGB')  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ RGB
        image = transform(image).unsqueeze(0)

        with torch.no_grad():
            outputs = model(image)
            _, preds = torch.max(outputs, 1)

        predicted_class = ALL_CLASSES[preds.item()]
        brand, model_name = predicted_class.split('_', 1)
        return brand, model_name
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {str(e)}")
        return None, None


# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model = load_model()
print(f"–ú–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {len(ALL_CLASSES)} –∫–ª–∞—Å—Å–æ–≤")


def save_photo(message):
    try:
        if message.content_type != 'photo':
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")
            return

        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        os.makedirs('temp_photos', exist_ok=True)
        temp_path = f"temp_photos/{message.message_id}.jpg"

        with open(temp_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        car_brand, car_model = predict_car_model(temp_path, model)

        if car_brand is None or car_model is None:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
            os.remove(temp_path)
            return

        markup = types.InlineKeyboardMarkup(row_width=3)
        item1 = types.InlineKeyboardButton("–î–∞! –≠—Ç–æ —Ç–∞ –º–∞—à–∏–Ω–∞.", callback_data='good')
        item2 = types.InlineKeyboardButton("–ù–µ —Ç–æ (–ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É)", callback_data='bad')
        item3 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.", callback_data='return')
        markup.add(item1, item2, item3)

        bot.send_message(message.chat.id,
                         f"üîç –ù–∞ —Ñ–æ—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –º–∞—Ä–∫–∞: {car_brand}\n"
                         f"üöò –ú–æ–¥–µ–ª—å: {car_model}",
                         reply_markup=markup)
        with open(f'./ChinaCar/{car_brand}/{car_model}/character.txt', 'r', encoding='utf-8') as file:
            text = file.read()
        bot.send_message(message.chat.id, text)

        os.remove(temp_path)

    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        if 'temp_path' in locals() and os.path.exists(temp_path):
            os.remove(temp_path)


@bot.message_handler(commands=['start'])
def welcome(message):
    sti = open('AnimatedSticker.tgs', 'rb')
    bot.send_sticker(message.chat.id, sti)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üòä –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")
    item2 = types.KeyboardButton("üé≤ –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –º–æ–¥–µ–ª—å")
    markup.add(item1, item2)

    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, <b>{0.first_name}</b>!\n–Ø - <b>{1.first_name}</b>, "
                     "—Å–æ–∑–¥–∞–Ω —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —É–∑–Ω–∞—Ç—å –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å "
                     "–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!".format(
                         message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def body(message):
    if message.chat.type == 'private':
        if message.text == "üòä –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ":
            sent_msg = bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:", parse_mode='html')
            bot.register_next_step_handler(sent_msg, save_photo)

        elif message.text == "üé≤ –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –º–æ–¥–µ–ª—å":
            try:
                get_photo, get_character = getRandomModel.deep_random_path()

                with open(get_photo, 'rb') as filePhoto:
                    bot.send_photo(message.chat.id, filePhoto)

                with open(get_character, 'r', encoding='utf-8') as file:
                    text = file.read()
                bot.send_message(message.chat.id, text)
            except Exception as e:
                bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ç–µ–±—è –ø–æ–Ω—è—Ç—å, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑)")


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                bot.send_message(call.message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Ä–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å!')
            elif call.data == 'bad':
                bot.send_message(call.message.chat.id, '–ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ.')
            elif call.data == 'return':
                welcome(call.message)

            # –£–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                                          message_id=call.message.message_id,
                                          reply_markup=None)
    except Exception as e:
        print(repr(e))


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)